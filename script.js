// S√©lectionner l'√©l√©ment du plateau de jeu
let gameBoard = document.getElementById('game-board');

// D√©finir les symboles
let symbols = ['üçé', 'üçå', 'üçä', 'üçá', 'üçì', 'üçâ', 'üçã', 'ü•ù'];
let gameCards = [...symbols, ...symbols]; // Duplique chaque symbole

// M√©langer les cartes
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
gameCards = shuffleArray(gameCards);

// Cr√©er et ajouter les cartes au plateau de jeu
gameCards.forEach((symbol, index) => {
    // Cr√©er un nouvel √©l√©ment div
    let card = document.createElement('div');

    // Ajouter la classe 'card' √† la div
    card.classList.add('card');

    // Ajouter un attribut data-id unique
    card.setAttribute('data-id', index);

    // Ajouter le symbole √† la carte (initialement cach√©)
    card.innerHTML = `<span style="display: none;">${symbol}</span>`;

    // Ajouter la carte au plateau de jeu
    gameBoard.appendChild(card);
});

// R√©cup√®re toutes les cartes du plateau de jeu
const cards = document.querySelectorAll('.card');

// Parcourt toutes les cartes
// Variables pour g√©rer l'√©tat du jeu
let firstCard = null; // Premi√®re carte s√©lectionn√©e
let secondCard = null; // Deuxi√®me carte s√©lectionn√©e
let chrono; // ID du chronom√®tre
let seconds = 0; // Temps √©coul√© en secondes
let timer = document.getElementById('timer'); // √âl√©ment pour afficher le temps
let gameStarted = false; // Indique si le jeu a commenc√©
let moves = document.getElementById('moves'); // √âl√©ment pour afficher le nombre de coups
let click = 0; // Compteur de coups
let lockBoard = false; // Verrouillage du plateau pour emp√™cher les clics rapides

// Fonction pour d√©marrer le chronom√®tre
function startTimer() {
    if (!gameStarted) { // V√©rifie si le jeu n'a pas encore commenc√©
        gameStarted = true; // Marque le jeu comme commenc√©
        // D√©marre le chronom√®tre qui s'incr√©mente chaque seconde
        chrono = window.setInterval(function() {
            seconds++;
            timer.innerHTML = seconds; // Met √† jour l'affichage du temps
        }, 1000);
    }
}

// Fonction pour v√©rifier si toutes les cartes sont vertes
function checkAllCardsGreen() {
    const allCards = document.querySelectorAll('.card'); // S√©lectionne toutes les cartes
    const allGreen = Array.from(allCards).every(card => 
        card.style.backgroundColor === 'lightgreen' // V√©rifie si toutes les cartes sont vertes
    );

    // Si toutes les cartes sont vertes
    if (allGreen) {
        console.log("Toutes les cartes sont vertes !");
        window.clearInterval(chrono); // Arr√™te le chronom√®tre
        // Affiche un message de f√©licitations avec le temps et le nombre de coups
        alert("F√©licitations ! Vous avez termin√© le jeu en " + seconds + " secondes et " + click + " coups !");
    }
}

// Fonction pour v√©rifier si les deux cartes s√©lectionn√©es correspondent
function checkForMatch() {
    if (firstCard && secondCard) { // V√©rifie si deux cartes sont s√©lectionn√©es
        let firstSymbol = firstCard.querySelector('span'); // R√©cup√®re le symbole de la premi√®re carte
        let secondSymbol = secondCard.querySelector('span'); // R√©cup√®re le symbole de la deuxi√®me carte

        // V√©rifie si les symboles des deux cartes sont identiques
        if (firstSymbol && secondSymbol) {
            if (firstSymbol.textContent === secondSymbol.textContent &&
                firstCard.getAttribute('data-id') !== secondCard.getAttribute('data-id')) {
                // Si les symboles correspondent
                firstCard.style.backgroundColor = 'lightgreen'; // Change la couleur de fond de la premi√®re carte
                secondCard.style.backgroundColor = 'lightgreen'; // Change la couleur de fond de la deuxi√®me carte
                
                // D√©sactive les clics sur les cartes trouv√©es
                firstCard.removeEventListener('click', cardClickHandler);
                secondCard.removeEventListener('click', cardClickHandler);
                
                checkAllCardsGreen(); // V√©rifie si toutes les cartes sont vertes
            } else {
                // Si les symboles ne correspondent pas, cache-les apr√®s 1 seconde
                setTimeout(() => {
                    firstSymbol.style.display = 'none'; // Cache le symbole de la premi√®re carte
                    secondSymbol.style.display = 'none'; // Cache le symbole de la deuxi√®me carte
                }, 1000);
            }
        }

        // R√©initialise les cartes apr√®s un court d√©lai
        setTimeout(() => {
            firstCard = null; // R√©initialise la premi√®re carte
            secondCard = null; // R√©initialise la deuxi√®me carte
            lockBoard = false; // D√©verrouille le plateau
        }, 1000);
    }
}

// Fonction qui g√®re le clic sur les cartes
function cardClickHandler() {
    if (lockBoard) return; // Si le plateau est verrouill√©, ne rien faire
    if (this === firstCard) return; // Emp√™che de cliquer deux fois sur la m√™me carte

    startTimer(); // D√©marre le chronom√®tre si ce n'est pas d√©j√† fait
    click++; // Incr√©mente le compteur de coups
    moves.innerHTML = click; // Met √† jour l'affichage du nombre de coups

    console.log('Carte cliqu√©e !');
    let symbol = this.querySelector('span'); // R√©cup√®re le symbole de la carte cliqu√©e

    if (!symbol) {
        console.error('Symbole non trouv√© dans la carte'); // Affiche une erreur si le symbole n'est pas trouv√©
        return;
    }

    symbol.style.display = 'block'; // Affiche le symbole de la carte

    if (!firstCard) {
        firstCard = this; // Si aucune carte n'est s√©lectionn√©e, s√©lectionne la premi√®re carte
    } else {
        secondCard = this; // S√©lectionne la deuxi√®me carte
        lockBoard = true; // Verrouille le plateau pour emp√™cher d'autres clics
        checkForMatch(); // V√©rifie si les deux cartes correspondent
    }

    console.log(this); // Affiche la carte cliqu√©e dans la console
}

// Boucle pour initialiser chaque carte
cards.forEach((card, index) => {
    card.setAttribute('data-id', index); // Attribue un ID unique √† chaque carte
    card.addEventListener('click', cardClickHandler); // Ajoute un √©couteur d'√©v√©nements pour le clic
});

// Fonction pour r√©initialiser le jeu
function resetGame() {
    // R√©initialise les variables
    firstCard = null;
    secondCard = null;
    seconds = 0;
    click = 0;
    gameStarted = false;
    lockBoard = false;

    // R√©initialise l'affichage du chronom√®tre et des coups
    timer.innerHTML = seconds;
    moves.innerHTML = click;

    // R√©initialise toutes les cartes
    const allCards = document.querySelectorAll('.card');
    allCards.forEach(card => {
        card.style.backgroundColor = ''; // R√©initialise la couleur de fond
        card.querySelector('span').style.display = 'none'; // Cache tous les symboles
        card.addEventListener('click', cardClickHandler); // R√©ajoute l'√©couteur d'√©v√©nements
    });

    console.log("Le jeu a √©t√© r√©initialis√© !");
}

// Boucle pour initialiser chaque carte
cards.forEach((card, index) => {
    card.setAttribute('data-id', index); // Attribue un ID unique √† chaque carte
    card.addEventListener('click', cardClickHandler); // Ajoute un √©couteur d'√©v√©nements pour le clic
});

// Exemple d'appel √† la fonction resetGame pour r√©initialiser le jeu
// Vous pouvez l'appeler par exemple lors d'un clic sur un bouton "R√©initialiser"
document.getElementById('reset-button').addEventListener('click', resetGame);